import { Redis } from '@nestjs-modules/ioredis';
import { PaginatedDto } from 'src/common/dto/paginated.dto';
import { SharedService } from 'src/shared/shared.service';
import { Repository } from 'typeorm';
import { DeptService } from '../dept/dept.service';
import { PostService } from '../post/post.service';
import { RoleService } from '../role/role.service';
import { ReqAddUserDto, ReqUpdataSelfDto, ReqUpdateSelfPwd, ReqUpdateUserDto, ReqUserListDto } from './dto/req-user.dto';
import { ResAuthRoleDto } from './dto/res-user.dto';
import { User } from './entities/user.entity';
export declare class UserService {
    private readonly userRepository;
    private readonly roleService;
    private readonly postService;
    private readonly deptService;
    private readonly sharedService;
    private readonly redis;
    constructor(userRepository: Repository<User>, roleService: RoleService, postService: PostService, deptService: DeptService, sharedService: SharedService, redis: Redis);
    findOneByUsername(username: string): Promise<User>;
    findOneByUserNameState(username: string): Promise<User>;
    list(reqUserListDto: ReqUserListDto, roleId?: number, reverse?: boolean, sataScopeSql?: string): Promise<PaginatedDto<User>>;
    userAllInfo(userId: number): Promise<User>;
    findOneUserAllById(userId: number): Promise<User>;
    addUser(reqAddUserDto: ReqAddUserDto): Promise<void>;
    updateUser(reqUpdateUserDto: ReqUpdateUserDto): Promise<void>;
    delete(userIdArr: string[], userName: string): Promise<import("typeorm").UpdateResult>;
    findById(userId: number): Promise<User>;
    resetPwd(userId: number, password: string, updateBy: string): Promise<void>;
    authRole(userId: number): Promise<ResAuthRoleDto>;
    updateAuthRole(userId: number, roleIdArr: number[], updateBy: string): Promise<User>;
    changeStatus(userId: number, status: string, updateBy: string): Promise<import("typeorm").UpdateResult>;
    updataProfile(reqUpdataSelfDto: ReqUpdataSelfDto, userId: number): Promise<import("typeorm").UpdateResult>;
    updateSelfPwd(reqUpdateSelfPwd: ReqUpdateSelfPwd, userName: string): Promise<void>;
    insert(data: any, userName: string): Promise<void>;
}
